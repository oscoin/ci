#!/usr/bin/env bash
set -eou pipefail
IFS=$'\n\t'

# Run pipeline upload on the host
if [[ "$BUILDKITE_COMMAND" == "buildkite-agent pipeline upload"* ]]
then
    # strip known command prefix
    args="${BUILDKITE_COMMAND#buildkite-agent pipeline upload}"
    # collect additional positional arguments
    # shellcheck disable=SC2206
    args=(${args# *})
    if [[ ${#args[@]} -gt 0 ]]
    then
        # take first argument and ensure it's a path relative to PWD
        arg="$(realpath --relative-base="$PWD" "${args[0]}")"
        arg="$(realpath --relative-base="$PWD" "$PWD/$arg")"
    else
        # otherwise, use agent defaults
        arg=""
    fi
    eval "buildkite-agent pipeline upload $arg"
    exit $?
fi

# Restrict docker images to vetted ones
: "${DOCKER_IMAGE:=}"

if [[ -n "${DOCKER_IMAGE}" && "${DOCKER_IMAGE}" != gcr.io/opensourcecoin/* ]]
then
    echo "Docker image ${DOCKER_IMAGE} not allowed"
    exit 1
fi

# Pass environment.

# Subset of the environment populated by buildkite.
#
# This avoids multi-line variables, and is driven mainly by the needs of
# codecov.io. More can be added on demand. See also `build_args` below.
build_env=(
    "--env=CI"
    "--env=BUILDKITE"
    "--env=BUILDKITE_BRANCH"
    "--env=BUILDKITE_BUILD_NUMBER"
    "--env=BUILDKITE_JOB_ID"
    "--env=BUILDKITE_BUILD_URL"
    "--env=BUILDKITE_PROJECT_SLUG"
    "--env=BUILDKITE_COMMIT"
)

if [[ "${TRUSTED_BUILD}" == "true" ]]
then
    build_env+=("--env=BUILDKITE_AGENT_ACCESS_TOKEN")
fi

declare -r img_image="gcr.io/opensourcecoin/img@sha256:24252f659024808246d8c4d674f19d8d923688cd5f857f4a607fe8dbf42c491c"

# Pipeline variables
#
# Using the `env` attribute in a pipeline yaml requires prefixing the variable
# names with `BUILD_`. The prefix will be removed.
for var in "${!BUILD_@}"
do
    echo "Exporting pipeline env variable '${var}' as '${var#BUILD_}'"
    build_env+=( "--env=${var#BUILD_}=${!var}" )
done

# Secret variables (as per environment hook)
for var in "${!SECRET_@}"
do
    echo "Exporting secret variable '${var}' as '${var#SECRET_}'"
    build_env+=( "--env=${var#SECRET_}=${!var}" )
done

# Volumes
declare -r tmp_size=200000000 # 200MB
volumes=(
    "--tmpfs=/tmp:rw,exec,nosuid,size=$tmp_size"
    "--mount=${DOCKER_CACHE_MOUNT}"
    "--mount=type=bind,src=${BUILDKITE_BUILD_CHECKOUT_PATH},dst=/build"
    "--mount=type=bind,src=/usr/bin/buildkite-agent,dst=/bin/buildkite-agent,readonly"
)

uid="$(id -u buildkite-builder)"
gid="$(id -g buildkite-builder)"

# Build and push docker image using `img`.
#
# The function uses the following arguments:
#
# * $1 is the tag of the image to push
# * $2 path of the docker file to build relative to the repository root.
# * $3 path to the build context relative to the repository root.
#
function build_docker_image() {
    local -r image_tag="$1"
    local -r docker_file="$2"
    local -r image_context="$3"

    # Shared cache per agent
    declare -r cache_refquota="15"
    declare -r img_cache="img_${BUILDKITE_AGENT_NAME}_${BUILDKITE_ORGANIZATION_SLUG}_${BUILDKITE_PIPELINE_SLUG}"
    docker volume create \
        --driver=zockervols \
        --label=build_cache \
        --opt='exec=on' \
        --opt='setuid=on' \
        --opt="refquota=${cache_refquota}GiB" \
        "$img_cache"

    # Build from other repos will not be able to change the shared
    # image build cache, and receive an ephemeral cache volume snapshotted from
    # the shared cache instead.
    #
    # See [Note on CI and organizations].
    declare img_cache_mount
    if [[ "${TRUSTED_BUILD}" == "true" ]]
    then
        img_cache_mount="type=volume,src=${img_cache},dst=/cache"
    else
        img_cache_mount="type=volume,dst=/cache,volume-driver=zockervols"
        img_cache_mount="${img_cache_mount},volume-opt=from=${img_cache}"
        # nb: we need to repeat all create options of the parent
        img_cache_mount="${img_cache_mount},volume-opt=exec=on"
        img_cache_mount="${img_cache_mount},volume-opt=setuid=on"
        img_cache_mount="${img_cache_mount},volume-opt=refquota=${cache_refquota}GiB"
    fi

    # See also `build_env` above.
    build_args=(
        "--build-arg=CI=$CI"
        "--build-arg=BUILDKITE=$BUILDKITE"
        "--build-arg=BUILDKITE_BRANCH=$BUILDKITE_BRANCH"
        "--build-arg=BUILDKITE_BUILD_NUMBER=$BUILDKITE_BUILD_NUMBER"
        "--build-arg=BUILDKITE_JOB_ID=$BUILDKITE_JOB_ID"
        "--build-arg=BUILDKITE_BUILD_URL=$BUILDKITE_BUILD_URL"
        "--build-arg=BUILDKITE_PROJECT_SLUG=$BUILDKITE_PROJECT_SLUG"
        "--build-arg=BUILDKITE_COMMIT=$BUILDKITE_COMMIT"
    )


    docker pull --quiet "$img_image"
    timeout \
        --kill-after="$((TIMEOUT_MINUTES + 10))m" \
        --signal=TERM \
        --verbose \
        "${TIMEOUT_MINUTES}m" \
        docker run \
            --rm \
            --name "img-${BUILDKITE_BUILD_ID}-${BUILDKITE_STEP_ID}" \
            --init \
            --mount="type=bind,src=${BUILDKITE_BUILD_CHECKOUT_PATH},dst=/build,readonly" \
            --mount="$img_cache_mount" \
            --security-opt='seccomp=unconfined' \
            --security-opt='apparmor=unconfined' \
            --security-opt='systempaths=unconfined' \
            --cap-drop=ALL \
            --cap-add=SETUID \
            --cap-add=SETGID \
            --workdir=/build \
            --env=IMG_DISABLE_EMBEDDED_RUNC=1 \
            "$img_image" \
                build \
                "${build_args[@]}" \
                --file="$docker_file" \
                --tag "$image_tag" \
                --no-console \
                --backend=native \
                --state=/cache \
                --output="type=docker,name=${image_tag}" \
                "$image_context" \
    | docker load --quiet

    docker push "${image_tag}"
    echo "Succesfully pushed ${image_tag}"
}


# If the base image for the step does not exist we build it locally and
# push it.
if ! docker pull "${DOCKER_IMAGE}"
then
    if [[ -n ${DOCKER_FILE:-} ]]
    then
        # Re-tag DOCKER_IMAGE with current commit
        : "${DOCKER_IMAGE:=gcr.io/opensourcecoin/${BUILDKITE_PIPELINE_SLUG}-build}"
        : "${DOCKER_IMAGE%%:*}"
        : "${_%%@*}"
        DOCKER_IMAGE="${_}:${BUILDKITE_COMMIT}"

        build_docker_image \
            "$DOCKER_IMAGE" \
            "$DOCKER_FILE" \
            "$(realpath --relative-base="$BUILDKITE_BUILD_CHECKOUT_PATH" "$(dirname "$DOCKER_FILE")")"
    fi
fi

# Run the build step
#
# Note: kata-containers segfault when sharing executables with the host OS.
#
# This is particularly annoying with --init: if a runc container is using tini
# (/usr/bin/docker-init) currently, no kata-containers container can run.
# Curiously, sharing a copy of tini amongst ONLY kata-containers seems to work.
#
# See: https://github.com/kata-containers/runtime/issues/1901

# Ensure we have a runtim
: "${DOCKER_RUNTIME:=runc}"

# Common args for `docker run`
run_args=(
    "--name=build-${BUILDKITE_BUILD_ID}-${BUILDKITE_STEP_ID}"
    '--tty'
    '--rm'
    '--read-only'
    "--user=${uid}:${gid}"
    '--cap-drop=ALL'
    '--security-opt=no-new-privileges'
    '--workdir=/build'
)

# Need to be careful with shell quoting when building the docker COMMAND: it has
# to be passed to `docker run` _without_ any quotes. This only works if we store
# it in an array, and later expand that.
run_cmd=()

if [[ "${DOCKER_RUNTIME}" == "kata-containers" ]]
then
    volumes+=("--mount=type=bind,src=/usr/bin/kata-init,dst=/tini")
    run_cmd=('/tini' '-sg' '--' '/bin/sh' '-e' '-c' "${BUILDKITE_COMMAND}")
else
    run_args+=('--init')
    run_cmd=('/bin/sh' '-e' '-c' "${BUILDKITE_COMMAND}")
fi

timeout \
    --kill-after="$((TIMEOUT_MINUTES + 10))m" \
    --signal=TERM \
    --verbose \
    "${TIMEOUT_MINUTES}m" \
    docker run \
        "${run_args[@]}" \
        "${build_env[@]}" \
        "${volumes[@]}" \
        --entrypoint='' \
        --runtime="${DOCKER_RUNTIME}" \
        "${DOCKER_IMAGE}" \
        "${run_cmd[@]}"

# If the step was to prepare a docker image build, run it now
if [[ -n ${STEP_DOCKER_FILE:-} ]]
then
    if [[ -n ${STEP_DOCKER_IMAGE:-} ]]
    then
        if [[ -n "${BUILDKITE_TAG}" ]]
        then
          tag="${BUILDKITE_TAG}"
        else
          tag="${BUILDKITE_COMMIT}"
        fi
        echo "--- Build container image artifact"
        build_docker_image \
            "${STEP_DOCKER_IMAGE}:${tag}" \
            "${STEP_DOCKER_FILE}" \
            "${STEP_DOCKER_CONTEXT:-$(dirname "$STEP_DOCKER_FILE")}"
    else
        echo "STEP_DOCKER_IMAGE variable is not set. Not building the docker image"
        exit 1
    fi
fi
