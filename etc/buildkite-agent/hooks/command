#!/usr/bin/env bash
set -eou pipefail
IFS=$'\n\t'

if [[ "$BUILDKITE_COMMAND" == "buildkite-agent pipeline upload"* ]]
then
    # strip known command prefix
    args="${BUILDKITE_COMMAND#buildkite-agent pipeline upload}"
    # collect additional positional arguments
    # shellcheck disable=SC2206
    args=(${args# *})
    if [[ ${#args[@]} -gt 0 ]]
    then
        # take first argument and ensure it's a path relative to PWD
        arg="$(realpath --relative-base="$PWD" "${args[0]}")"
        arg="$(realpath --relative-base="$PWD" "$PWD/$arg")"
    else
        # otherwise, use agent defaults
        arg=""
    fi
    eval "buildkite-agent pipeline upload $arg"
    exit $?
fi

: "${DOCKER_IMAGE:=None}"

if [[ "${DOCKER_IMAGE}" != gcr.io/opensourcecoin/* ]]
then
    echo "Docker image ${DOCKER_IMAGE} not allowed"
    exit 1
fi

# Pass environment.

# Subset of the environment populated by buildkite.
#
# This avoids multi-line variables, and is driven mainly by the needs of
# codecov.io. More can be added on demand.
build_env=(
    "--env=CI"
    "--env=BUILDKITE"
    "--env=BUILDKITE_BRANCH"
    "--env=BUILDKITE_BUILD_NUMBER"
    "--env=BUILDKITE_JOB_ID"
    "--env=BUILDKITE_BUILD_URL"
    "--env=BUILDKITE_PROJECT_SLUG"
    "--env=BUILDKITE_COMMIT"
)

# Pipeline variables
#
# Using the `env` attribute in a pipeline yaml requires prefixing the variable
# names with `BUILD_`. The prefix will be removed.
for var in "${!BUILD_@}"
do
    echo "Exporting pipeline env variable '${var}' as '${var#BUILD_}'"
    build_env+=( "--env=${var#BUILD_}=${!var}" )
done

# Secret variables (as per environment hook)
for var in "${!SECRET_@}"
do
    echo "Exporting secret variable '${var}' as '${var#SECRET_}'"
    build_env+=( "--env=${var#SECRET_}=${!var}" )
done

# Volumes
declare -r tmp_size=200000000 # 200MB
volumes=(
    "--tmpfs=/tmp:rw,exec,nosuid,size=$tmp_size"
    "--mount=${DOCKER_CACHE_MOUNT}"
    "--mount=type=bind,src=${BUILDKITE_BUILD_CHECKOUT_PATH},dst=/build"
)
if [[ -n "$SECRET_GOOGLE_APPLICATION_CREDENTIALS" ]]
then
    volumes+=(
        "--mount=type=bind,src=${SECRET_GOOGLE_APPLICATION_CREDENTIALS},dst=${SECRET_GOOGLE_APPLICATION_CREDENTIALS},readonly"
    )
fi

uid="$(id -u buildkite-builder)"
gid="$(id -g buildkite-builder)"

set +e
timeout \
    --kill-after="$((BUILD_TIMEOUT_MINUTES + 10))m" \
    --signal=TERM \
    --verbose \
    "${BUILD_TIMEOUT_MINUTES}m" \
    docker run --tty --rm \
        --name="build-${BUILDKITE_BUILD_ID}-${BUILDKITE_STEP_ID}" \
        --read-only \
        --user="${uid}:${gid}" \
        --cap-drop=ALL \
        --security-opt=no-new-privileges \
        --runtime="${DOCKER_RUNTIME:-runc}" \
        "${volumes[@]}" \
        --workdir=/build \
        "${build_env[@]}" \
        "${DOCKER_IMAGE}"  \
        /bin/sh -c "${BUILDKITE_COMMAND}"

if [[ $? == 124 ]]
then
    echo
    echo "The job timed out after ${BUILD_TIMEOUT_MINUTES} minutes!"
    echo
fi
exit $?
