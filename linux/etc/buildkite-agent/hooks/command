#!/usr/bin/env bash
set -eou pipefail
IFS=$'\n\t'

# Run pipeline upload on the host
if [[ "$BUILDKITE_COMMAND" == "buildkite-agent pipeline upload"* ]]
then
    # strip known command prefix
    args="${BUILDKITE_COMMAND#buildkite-agent pipeline upload}"
    # collect additional positional arguments
    # shellcheck disable=SC2206
    args=(${args# *})
    if [[ ${#args[@]} -gt 0 ]]
    then
        # take first argument and ensure it's a path relative to PWD
        arg="$(realpath --relative-base="$PWD" "${args[0]}")"
        arg="$(realpath --relative-base="$PWD" "$PWD/$arg")"
    else
        # otherwise, use agent defaults
        arg=""
    fi
    eval "buildkite-agent pipeline upload $arg"
    exit $?
fi

# Restrict docker images to vetted ones
: "${DOCKER_IMAGE:=}"

if [[ -n "${DOCKER_IMAGE}" && "${DOCKER_IMAGE}" != gcr.io/opensourcecoin/* ]]
then
    echo "Docker image ${DOCKER_IMAGE} not allowed"
    exit 1
fi

# Pass environment.

# Subset of the environment populated by buildkite.
#
# This avoids multi-line variables, and is driven mainly by the needs of
# codecov.io. More can be added on demand. See also `build_args` below.
build_env=(
    "--env=CI"
    "--env=BUILDKITE"
    "--env=BUILDKITE_BRANCH"
    "--env=BUILDKITE_BUILD_NUMBER"
    "--env=BUILDKITE_JOB_ID"
    "--env=BUILDKITE_BUILD_URL"
    "--env=BUILDKITE_PROJECT_SLUG"
    "--env=BUILDKITE_COMMIT"
)

# Pipeline variables
#
# Using the `env` attribute in a pipeline yaml requires prefixing the variable
# names with `BUILD_`. The prefix will be removed.
for var in "${!BUILD_@}"
do
    echo "Exporting pipeline env variable '${var}' as '${var#BUILD_}'"
    build_env+=( "--env=${var#BUILD_}=${!var}" )
done

# Secret variables (as per environment hook)
for var in "${!SECRET_@}"
do
    echo "Exporting secret variable '${var}' as '${var#SECRET_}'"
    build_env+=( "--env=${var#SECRET_}=${!var}" )
done

# Volumes
declare -r tmp_size=200000000 # 200MB
volumes=(
    "--tmpfs=/tmp:rw,exec,nosuid,size=$tmp_size"
    "--mount=${DOCKER_CACHE_MOUNT}"
    "--mount=type=bind,src=${BUILDKITE_BUILD_CHECKOUT_PATH},dst=/build"
)

uid="$(id -u buildkite-builder)"
gid="$(id -g buildkite-builder)"

# Build and push docker image using `img`.
#
# The function uses the following variables
# * 'image_tag' is the tag of the image to push
# * 'docker_file' path of the docker file to build relative to the
#   repository root.
# * 'image_context' path to the build context relative to the
#   repository root.
function build_docker_image() {
    # Shared cache per agent
    declare -r img_cache="img_${BUILDKITE_AGENT_NAME}_${BUILDKITE_ORGANIZATION_SLUG}_${BUILDKITE_PIPELINE_SLUG}"
    docker volume create \
        --driver=zockervols \
        --label=build_cache \
        --opt='exec=on' \
        --opt='setuid=on' \
        --opt='quota=15GiB' \
        "$img_cache"

    # fix permissions (`img` relies on running as uid 1000)
    docker run --rm \
        --mount="type=volume,src=${img_cache},dst=/cache" \
        alpine \
        chmod 777 /cache

    # Build from other repos will not be able to change the shared
    # image build cache.
    #
    # Don't forget to update this after new organizations are added/removed.
    # See [Note on CI and organizations].
    declare img_cache_mount
    if [[ "${BUILDKITE_REPO}" == https://github.com/oscoin/* ||
          "${BUILDKITE_REPO}" == https://github.com/radicle-dev/* ]]
    then
        img_cache_mount="type=volume,src=${img_cache},dst=/cache"
    else
        img_cache_mount="type=volume,dst=/cache,volume-driver=zockervols,volume-opt=from=${img_cache}"
    fi

    # See also `build_env` above.
    build_args=(
        "--build-arg=CI=$CI"
        "--build-arg=BUILDKITE=$BUILDKITE"
        "--build-arg=BUILDKITE_BRANCH=$BUILDKITE_BRANCH"
        "--build-arg=BUILDKITE_BUILD_NUMBER=$BUILDKITE_BUILD_NUMBER"
        "--build-arg=BUILDKITE_JOB_ID=$BUILDKITE_JOB_ID"
        "--build-arg=BUILDKITE_BUILD_URL=$BUILDKITE_BUILD_URL"
        "--build-arg=BUILDKITE_PROJECT_SLUG=$BUILDKITE_PROJECT_SLUG"
        "--build-arg=BUILDKITE_COMMIT=$BUILDKITE_COMMIT"
    )

    timeout \
        --kill-after="$((TIMEOUT_MINUTES + 10))m" \
        --signal=TERM \
        --verbose \
        "${TIMEOUT_MINUTES}m" \
        docker run \
            --rm \
            --name "img-${BUILDKITE_BUILD_ID}-${BUILDKITE_STEP_ID}" \
            --init \
            --mount="type=bind,src=${BUILDKITE_BUILD_CHECKOUT_PATH},dst=/build,readonly" \
            --mount="$img_cache_mount" \
            --security-opt='seccomp=unconfined' \
            --security-opt='apparmor=unconfined' \
            --security-opt='systempaths=unconfined' \
            --cap-drop=ALL \
            --cap-add=SETUID \
            --cap-add=SETGID \
            --workdir=/build \
            'gcr.io/opensourcecoin/img@sha256:6a8661fc534f2341a42d6440e0c079aeaa701fe9d6c70b12280a1f8ce30b700c' \
                build \
                "${build_args[@]}" \
                --file="$docker_file" \
                --tag "$image_tag" \
                --no-console \
                --backend=native \
                --state=/cache \
                --output="type=docker,name=${image_tag}" \
                "$image_context" \
    | docker load

    docker push "${image_tag}"
}


# If the base image for the step does not exist we build it locally and
# push it.
if ! docker pull "${DOCKER_IMAGE}"; then
  if [[ -n ${DOCKER_FILE:-} ]]; then
    # Re-tag DOCKER_IMAGE with current commit
    : "${DOCKER_IMAGE:=gcr.io/opensourcecoin/${BUILDKITE_PIPELINE_SLUG}-build}"
    : "${DOCKER_IMAGE%%:*}"
    : "${_%%@*}"
    DOCKER_IMAGE="${_}:${BUILDKITE_COMMIT}"
    declare -r image_tag="${BUILD_DOCKER_IMAGE_NAME}:${BUILDKITE_COMMIT}"
    declare -r docker_file="$DOCKER_FILE"
    # Context path is the directory of the docker file
    declare image_context
    image_context="$(realpath --relative-base="$BUILDKITE_BUILD_CHECKOUT_PATH" "$(dirname "$DOCKER_FILE")")"
    build_docker_image
  fi
fi

timeout \
    --kill-after="$((TIMEOUT_MINUTES + 10))m" \
    --signal=TERM \
    --verbose \
    "${TIMEOUT_MINUTES}m" \
    docker run --tty --rm \
        --name="build-${BUILDKITE_BUILD_ID}-${BUILDKITE_STEP_ID}" \
        --init \
        --read-only \
        --user="${uid}:${gid}" \
        --cap-drop=ALL \
        --security-opt=no-new-privileges \
        --runtime="${DOCKER_RUNTIME:-runc}" \
        "${volumes[@]}" \
        --workdir=/build \
        --entrypoint='' \
        "${build_env[@]}" \
        "${DOCKER_IMAGE}"  \
        /bin/sh -e -c "${BUILDKITE_COMMAND}"

if [[ "${BUILD_DOCKER_IMAGE:-}" = "true" ]]; then
  if [[ -z "${BUILD_DOCKER_IMAGE_NAME}" ]]; then
    echo "BUILD_DOCKER_IMAGE_NAME variable is not set. Not building the docker image"
    exit 1
  fi

  if [[ "${BUILD_DOCKER_IMAGE_NAME}" != gcr.io/opensourcecoin/* ]]; then
    echo "Invalid BUILD_DOCKER_IMAGE_NAME. Value must start with 'gcr.io/opensourcecoin/'"
  fi

  image_tag="${BUILD_DOCKER_IMAGE_NAME}:${BUILDKITE_COMMIT}" \
  docker_file="./img-build/Dockerfile" \
  image_context="./"
  build_docker_image
fi
