#!/usr/bin/env bash
set -eou pipefail
IFS=$'\n\t'

declare -ri MIN_TIMEOUT_MINUTES=50
declare -ri MAX_TIMEOUT_MINUTES=240
declare -i timeout_minutes=$MIN_TIMEOUT_MINUTES

declare -ri CACHE_QUOTA_GiB=8
declare -r cache_volume_prefix="cache_${BUILDKITE_AGENT_NAME}_${BUILDKITE_ORGANIZATION_SLUG}_${BUILDKITE_PIPELINE_SLUG}"

if [[ "${SHARED_MASTER_CACHE:-}" = "true" ]]; then
  declare -r shared_cache_volume_prefix="cache_shared_${BUILDKITE_ORGANIZATION_SLUG}_${BUILDKITE_PIPELINE_SLUG}"
  declare -r master_cache_volume="${shared_cache_volume_prefix}_${BUILDKITE_PIPELINE_DEFAULT_BRANCH}"
else
  declare -r master_cache_volume="${cache_volume_prefix}_${BUILDKITE_PIPELINE_DEFAULT_BRANCH}"
fi

# Create volume for master branch, if not exists
docker volume create \
    --driver=zockervols \
    --opt="quota=${CACHE_QUOTA_GiB}GiB" \
    --opt="exec=on" \
    "$master_cache_volume" >/dev/null
echo "Using master cache volume ${master_cache_volume}"

# Set `TRUSTED_BUILD` environment.
#
# The `TRUSTED_BUILD` environment variable is set to `true` if we are
# building code that was pushed to a trusted repo, i.e. one that
# matches `TRUSTED_UPSTREAMS_REGEX`.
#
# Trusted builds have access to shared caches, use encrypted secrets,
# have less strict process isolation, and potentially other things.

declare -r TRUSTED_UPSTREAMS_REGEX="(https|git)://github.com/(oscoin|radicle-dev)/*"

if [[ "${BUILDKITE_REPO}" =~ $TRUSTED_UPSTREAMS_REGEX ]]
then
    # Guard against Github Pull Requests from third parties origin.
    # `$BUILDKITE_PULL_REQUEST_REPO` may be empty if the build was
    # triggered from a push and not a PR. In this case we trust it.
    if [[ "${BUILDKITE_PULL_REQUEST_REPO}" == "" ||
          "${BUILDKITE_PULL_REQUEST_REPO}" =~ $TRUSTED_UPSTREAMS_REGEX ]]
    then
        export TRUSTED_BUILD=true
    else
        export TRUSTED_BUILD=false
    fi
else
    echo "Refusing to build foreign repo: ${BUILDKITE_REPO}"
    exit 1
fi

if [[ "${TRUSTED_BUILD}" == "true" ]]
then
    if [[ "${BUILDKITE_BRANCH}" == "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]
    then
        # Use and mutate the master cache
        declare -r cache_volume="${master_cache_volume}"
    else
        # Create a branch cache from master, labelled for later pruning
        declare -r branch_cache_volume="${cache_volume_prefix}_${BUILDKITE_BRANCH}"
        docker volume create \
            --driver=zockervols \
            --label=build_cache \
            --opt="from=${master_cache_volume}" \
            --opt="quota=${CACHE_QUOTA_GiB}GiB" \
            --opt="exec=on" \
            "$branch_cache_volume"
        declare -r cache_volume="${branch_cache_volume}"
    fi

    export DOCKER_CACHE_MOUNT="type=volume,src=${cache_volume},dst=/cache,volume-driver=zockervols,volume-nocopy=true"

    # FIXME: can we ensure somehow that all variables in secrets_file are
    # prefixed by `SECRET_`?
    declare -r secrets_file="/etc/buildkite-agent/secrets"
    if test -r "$secrets_file" -a -f "$secrets_file"
    then
        set -a
        # shellcheck source=/dev/null
        . "$secrets_file"
        set +a
    fi

    # "Trusted" builds may bump the timeout
    if [[ "${BUILDKITE_TIMEOUT}" != "false" ]]
    then
        timeout_minutes="$((BUILDKITE_TIMEOUT > MAX_TIMEOUT_MINUTES ? MAX_TIMEOUT_MINUTES : BUILDKITE_TIMEOUT))"
    fi
else
    # Use kata-containers for isolation
    export DOCKER_RUNTIME=kata-containers
    # Create an anonymous branch cache from master, which gets discarded at the
    # end of the build
    export DOCKER_CACHE_MOUNT="type=volume,dst=/cache,volume-driver=zockervols,volume-opt=from=${master_cache_volume},volume-opt=quota=${CACHE_QUOTA_GiB}GiB,volume-opt=exec=on"
fi

export TIMEOUT_MINUTES=$timeout_minutes

# Artifacts
#
# We're storing artifacts in our own GCS bucket in order to get predictable
# download URLs. However, in order to not having to deal with sanitising branch
# names, this applies only to `master` (that is,
# BUILDKITE_PIPELINE_DEFAULT_BRANCH) builds. All other branches are scoped by
# BUILDKITE_JOB_ID, as is the default.
#
# Note that artifacts can be overwritten when triggering a rebuild. This is no
# different from managed artifact storage.
#
if [[ "${BUILDKITE_BRANCH}" == "${BUILDKITE_PIPELINE_DEFAULT_BRANCH}" ]]
then
    declare -r artifact_scope="${BUILDKITE_PIPELINE_DEFAULT_BRANCH}/${BUILDKITE_COMMIT}"
else
    declare -r artifact_scope="$BUILDKITE_JOB_ID"
fi
export BUILDKITE_ARTIFACT_UPLOAD_DESTINATION="gs://builds.radicle.xyz/${BUILDKITE_PIPELINE_SLUG}/${artifact_scope}"
